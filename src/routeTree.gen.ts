/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ServiciosIndexImport } from './routes/servicios/index'
import { Route as ProductosIndexImport } from './routes/productos/index'
import { Route as AsistenciasIndexImport } from './routes/asistencias/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ServiciosIndexRoute = ServiciosIndexImport.update({
  id: '/servicios/',
  path: '/servicios/',
  getParentRoute: () => rootRoute,
} as any)

const ProductosIndexRoute = ProductosIndexImport.update({
  id: '/productos/',
  path: '/productos/',
  getParentRoute: () => rootRoute,
} as any)

const AsistenciasIndexRoute = AsistenciasIndexImport.update({
  id: '/asistencias/',
  path: '/asistencias/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/asistencias/': {
      id: '/asistencias/'
      path: '/asistencias'
      fullPath: '/asistencias'
      preLoaderRoute: typeof AsistenciasIndexImport
      parentRoute: typeof rootRoute
    }
    '/productos/': {
      id: '/productos/'
      path: '/productos'
      fullPath: '/productos'
      preLoaderRoute: typeof ProductosIndexImport
      parentRoute: typeof rootRoute
    }
    '/servicios/': {
      id: '/servicios/'
      path: '/servicios'
      fullPath: '/servicios'
      preLoaderRoute: typeof ServiciosIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/asistencias': typeof AsistenciasIndexRoute
  '/productos': typeof ProductosIndexRoute
  '/servicios': typeof ServiciosIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/asistencias': typeof AsistenciasIndexRoute
  '/productos': typeof ProductosIndexRoute
  '/servicios': typeof ServiciosIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/asistencias/': typeof AsistenciasIndexRoute
  '/productos/': typeof ProductosIndexRoute
  '/servicios/': typeof ServiciosIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/asistencias' | '/productos' | '/servicios'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/asistencias' | '/productos' | '/servicios'
  id: '__root__' | '/' | '/asistencias/' | '/productos/' | '/servicios/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AsistenciasIndexRoute: typeof AsistenciasIndexRoute
  ProductosIndexRoute: typeof ProductosIndexRoute
  ServiciosIndexRoute: typeof ServiciosIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AsistenciasIndexRoute: AsistenciasIndexRoute,
  ProductosIndexRoute: ProductosIndexRoute,
  ServiciosIndexRoute: ServiciosIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/asistencias/",
        "/productos/",
        "/servicios/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/asistencias/": {
      "filePath": "asistencias/index.tsx"
    },
    "/productos/": {
      "filePath": "productos/index.tsx"
    },
    "/servicios/": {
      "filePath": "servicios/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
